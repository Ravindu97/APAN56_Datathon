# -*- coding: utf-8 -*-
"""modelTrainFinal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xj-xF1Bz8UvVF0mvUlzDkhfJV-eTTTg_
"""

install.packages("dplyr")

install.packages("dplyr")

install.packages("caret")

install.packages("tidyverse")

install.packages("randomForest")

# Import the Dataset
data = read.csv("Dataset 01.csv")

data $ sunrise = as.Date(data$sunrise, formate = "%Y-%m-%d")
data $ sunset = as.Date(data$sunset, formate = "%Y-%m-%d")

data $ time = as.Date(data$time, formate = "%Y-%m-%d")

head(data)

# Data Preparation
library(tidyverse)
roi_data <- data %>%
  mutate(hours_between_sunrise_sunset = as.numeric(difftime(sunset, sunrise, units = "hours")),
         score = (0.5 * (shortwave_radiation_sum + windspeed_10m_max - temperature_2m_mean - rain_sum - precipitation_hours - elevation)) +
                 (0.1 * hours_between_sunrise_sunset)) %>%
  select(city, temperature_2m_mean, hours_between_sunrise_sunset,
         shortwave_radiation_sum, rain_sum, precipitation_hours,
         windspeed_10m_max, elevation, score) %>%
  drop_na()  # Drop rows with missing values

# Find the city with the highest score
highest_score_city <- roi_data %>%
  filter(score == max(score)) %>%
  select(city, score)

# Print the city with the highest score
cat("City with the highest score:", highest_score_city$city, "\n")
cat("Highest score:", highest_score_city$score, "\n")

# Data Preparation
roi_data <- data %>%
  mutate(hours_between_sunrise_sunset = as.numeric(difftime(sunset, sunrise, units = "hours")),
         score = (0.5 * (shortwave_radiation_sum + windspeed_10m_max - temperature_2m_mean - rain_sum - precipitation_hours - elevation)) +
                 (0.1 * hours_between_sunrise_sunset)) %>%
  select(city, temperature_2m_mean, hours_between_sunrise_sunset,
         shortwave_radiation_sum, rain_sum, precipitation_hours,
         windspeed_10m_max, elevation, score) %>%
  drop_na()  # Drop rows with missing values

# Encode 'city' as a factor
roi_data$city <- as.factor(roi_data$city)

# Split data into training and testing sets
set.seed(123)
train_index <- createDataPartition(roi_data$city, p = 0.7, list = FALSE)
train_data <- roi_data[train_index, ]
test_data <- roi_data[-train_index, ]

# Build a Classification Model (Random Forest)
model <- randomForest(city ~ temperature_2m_mean + hours_between_sunrise_sunset +
                         shortwave_radiation_sum + rain_sum + precipitation_hours +
                         windspeed_10m_max + elevation + score,
                       data = train_data,
                       importance = TRUE)

# Make Predictions on the Test Data
predictions <- predict(model, newdata = test_data)

# Calculate Accuracy
accuracy <- mean(predictions == test_data$city)
cat("Accuracy:", accuracy, "\n")

# Feature Importance
importance <- importance(model)
print(importance)

# Find the city with the highest score
highest_score_city <- test_data %>%
  filter(score == max(score)) %>%
  select(city, score)

# Print the city with the highest score
cat("City with the highest score:", highest_score_city$city, "\n")
cat("Highest score:", highest_score_city$score, "\n")

"""Time Series

For Mean Temperature
"""

# Calculate yearly mean temperatures
yearly_mean_temps <- data %>%
  group_by(Year = format(time, "%Y")) %>%
  summarise(Mean_Temperature = mean(temperature_2m_mean))

ggplot(yearly_mean_temps, aes(x = as.integer(Year), y = Mean_Temperature)) +
  geom_line(aes(group = 1), color = "yellow", size = 1.5) +
  geom_point(color = "black", size = 3) +
  labs(title = "Yearly Mean Temperature Over 13 Years",
       x = "Year",
       y = "Mean Temperature") +
  theme_minimal() +
  theme(plot.title = element_text(size = 18, hjust = 0.5),
        axis.title = element_text(size = 14),
        axis.text = element_text(size = 12))



"""shortwave_radiation_sum"""

# Calculate yearly mean temperatures
yearly_mean_temps <- data %>%
  group_by(Year = format(time, "%Y")) %>%
  summarise(Mean_radiation = mean(shortwave_radiation_sum))

ggplot(yearly_mean_temps, aes(x = as.integer(Year), y = Mean_radiation)) +
  geom_line(aes(group = 1), color = "steelblue", size = 1.5) +
  geom_point(color = "red", size = 3) +
  labs(title = "Yearly Mean shortwave radiation Over 13 Years",
       x = "Year",
       y = "Mean radiation") +
  theme_minimal() +
  theme(plot.title = element_text(size = 18, hjust = 0.5),
        axis.title = element_text(size = 14),
        axis.text = element_text(size = 12))

# Calculate yearly mean temperatures
yearly_mean_temps <- data %>%
  group_by(Year = format(time, "%Y")) %>%
  summarise(Mean_windspeed = mean(windspeed_10m_max))

ggplot(yearly_mean_temps, aes(x = as.integer(Year), y = Mean_windspeed)) +
  geom_line(aes(group = 1), color = "green", size = 1.5) +
  geom_point(color = "black", size = 3) +
  labs(title = "Yearly Mean wind speed Over 13 Years",
       x = "Year",
       y = "Mean wind speed") +
  theme_minimal() +
  theme(plot.title = element_text(size = 18, hjust = 0.5),
        axis.title = element_text(size = 14),
        axis.text = element_text(size = 12))

# Calculate yearly mean temperatures
yearly_mean_temps <- data %>%
  group_by(Year = format(time, "%Y")) %>%
  summarise(Mean_presipitation_hours = mean(precipitation_hours))

ggplot(yearly_mean_temps, aes(x = as.integer(Year), y = Mean_presipitation_hours)) +
  geom_line(aes(group = 1), color = "green", size = 1.5) +
  geom_point(color = "red", size = 3) +
  labs(title = "Yearly Mean preicipitation hours Over 13 Years",
       x = "Year",
       y = "Mean preicipitation hours") +
  theme_minimal() +
  theme(plot.title = element_text(size = 18, hjust = 0.5),
        axis.title = element_text(size = 14),
        axis.text = element_text(size = 12))

# Calculate yearly mean temperatures
yearly_mean_temps <- data %>%
  group_by(Year = format(time, "%Y")) %>%
  summarise(Mean_windgusts = mean(windgusts_10m_max))

ggplot(yearly_mean_temps, aes(x = as.integer(Year), y = Mean_windgusts)) +
  geom_line(aes(group = 1), color = "pink", size = 1.5) +
  geom_point(color = "black", size = 3) +
  labs(title = "Yearly Mean windgusts Over 13 Years",
       x = "Year",
       y = "Mean windgusts") +
  theme_minimal() +
  theme(plot.title = element_text(size = 18, hjust = 0.5),
        axis.title = element_text(size = 14),
        axis.text = element_text(size = 12))

"""BoxPlot

Temperature
"""

# Calculate yearly mean temperatures for each city
yearly_mean_temps <- data %>%
  mutate(Year = format(time, "%Y")) %>%
  group_by(Year, city) %>%
  summarise(Mean_Temperature = mean(temperature_2m_mean))

# Create a boxplot for temperature fluctuations by city with vertical x-labels
ggplot(yearly_mean_temps, aes(x = city, y = Mean_Temperature, fill = city)) +
  geom_boxplot() +
  labs(title = "Temperature Fluctuations by City",
       x = "City",
       y = "Mean Temperature") +
  theme_minimal() +
  theme(plot.title = element_text(size = 18, hjust = 0.5),
        axis.title = element_text(size = 14),
        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 12),  # Vertical x-labels
        axis.text.y = element_text(size = 12),
        legend.position = "none")

# Calculate yearly mean temperatures for each city
yearly_mean_temps <- data %>%
  mutate(Year = format(time, "%Y")) %>%
  group_by(Year, city) %>%
  summarise(Mean_Temperature = mean(windspeed_10m_max))

# Create a boxplot for temperature fluctuations by city with vertical x-labels
ggplot(yearly_mean_temps, aes(x = city, y = Mean_Temperature, fill = city)) +
  geom_boxplot() +
  labs(title = "Wind speed Fluctuations by City",
       x = "City",
       y = "Mean wind speed") +
  theme_minimal() +
  theme(plot.title = element_text(size = 18, hjust = 0.5),
        axis.title = element_text(size = 14),
        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 12),  # Vertical x-labels
        axis.text.y = element_text(size = 12),
        legend.position = "none")

# Calculate yearly mean temperatures for each city
yearly_mean_temps <- data %>%
  mutate(Year = format(time, "%Y")) %>%
  group_by(Year, city) %>%
  summarise(Mean_Temperature = mean(precipitation_hours))

# Create a boxplot for temperature fluctuations by city with vertical x-labels
ggplot(yearly_mean_temps, aes(x = city, y = Mean_Temperature, fill = city)) +
  geom_boxplot() +
  labs(title = "Mean precipitation Fluctuations by City",
       x = "City",
       y = "Mean precipitation hours") +
  theme_minimal() +
  theme(plot.title = element_text(size = 18, hjust = 0.5),
        axis.title = element_text(size = 14),
        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 12),  # Vertical x-labels
        axis.text.y = element_text(size = 12),
        legend.position = "none")