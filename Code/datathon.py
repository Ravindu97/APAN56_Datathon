# -*- coding: utf-8 -*-
"""Datathon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HnYH5b2P1CO75ZDCpP0x3-EfQoOKsOYE
"""

# Load necessary libraries

install.packages("tidyverse")
install.packages("ggplot2")
install.packages("ggplot")
install.packages("tinytext")
install.packages("dplyr")
install.packages("lubridate")
install.packages("tidyr")
install.packages("plotly")

# Import the Dataset
data = read.csv("Dataset 01.csv")

data $ sunrise = as.Date(data$sunrise, formate = "%Y-%m-%d")
data $ sunset = as.Date(data$sunset, formate = "%Y-%m-%d")

data $ time = as.Date(data$time, formate = "%Y-%m-%d")

# Data Summary
head(data)

summary(data)

str(data)

# Identify Missing Values
missing_values <- sapply(data, function(x) sum(is.na(x)))
print(missing_values)

typeof(time)

"""Heat Map was not Required as there are no any missing values."""

# Time Series Analysis
library(ggplot2)
data$time <- as.POSIXct(data$time) # Convert time column to POSIXct
ggplot(data, aes(x = time, y = temperature_2m_mean)) +
  geom_line() +
  labs(title = "Temperature Over Time", x = "Time", y = "Max Temperature")

# Univariate Analysis
ggplot(data, aes(x = temperature_2m_mean)) +
  geom_histogram(binwidth = 2, fill = "blue", color = "black") +
  labs(title = "Temperature Distribution", x = "Max Temperature")

# Univariate Analysis
ggplot(data, aes(x = precipitation_sum )) +
  geom_histogram(binwidth = 2, fill = "blue", color = "black") +
  labs(title = "precipitation_sum Distribution", x = "Max Temperature")



# Bivariate Analysis
ggplot(data, aes(x = temperature_2m_mean, y = apparent_temperature_mean)) +
  geom_point(alpha = 0.5) +
  labs(title = "Temperature vs. Apparent Temperature mean", x = "Temperature mean", y = "Apparent Temperature mean")

# Correlation Analysis
correlation_matrix <- cor(data[, c("temperature_2m_mean", "apparent_temperature_mean", "windspeed_10m_max", "precipitation_hours")])
print(correlation_matrix)
heatmap(correlation_matrix)




library(ggplot2)

# Assuming 'data' is your dataset
data$time <- as.POSIXct(data$time) # Convert time column to POSIXct

# Create a heatmap for solar panel efficiency across cities and temperature ranges
ggplot(data, aes(x = temperature_2m_mean, y = city, fill = efficiency)) +
  geom_tile() +
  scale_fill_gradient(low = "red", high = "green") +
  labs(title = "Solar Panel Efficiency Heatmap by City and Temperature",
       x = "Temperature (°C)",
       y = "City",
       fill = "Efficiency") +
  theme_minimal() +
  theme(axis.text.y = element_text(angle = 0, hjust = 1))

# Seasonal Patterns
seasonal_decomposition <- decompose(data$temperature_2m_mean)
plot(seasonal_decomposition)

# Geospatial Analysis (assuming latitude and longitude columns)
ggplot(data, aes(x = longitude, y = latitude)) +
  geom_point() +
  labs(title = "Geographical Distribution", x = "Longitude", y = "Latitude")

# Outlier Detection
ggplot(data, aes(x = weathercode, y = temperature_2m_mean)) +
  geom_boxplot() +
  labs(title = "Temperature Distribution by Weather Code", x = "Weather Code", y = "Mean Temperature")

library(tidyverse)
# Temporal Analysis (e.g., weekly aggregates)
data$week <- lubridate::week(data$time)
weekly_aggregates <- data %>%
  group_by(week) %>%
  summarise(avg_temp = mean(temperature_2m_mean))
ggplot(weekly_aggregates, aes(x = week, y = avg_temp)) +
  geom_bar(stat = "identity") +
  labs(title = "Weekly Average Temperature", x = "Week", y = "Average Temperature")

# Interactive Visualizations
ggplot(data, aes(x = temperature_2m_mean, y = windspeed_10m_max)) +
  geom_point(alpha = 0.5) +
  labs(title = "Temperature vs. Windspeed", x = "Mean Temperature", y = "Max Windspeed")

plot_temperature <- ggplot(data, aes(x = time, y = temperature_2m_mean)) +
  geom_line(aes(color = "red")) +
  labs(
    title = "Temporal Time Series of Temperature 2m Mean",
    x = "Time",
    y = "Temperature (°C)"
  ) +
  theme_minimal()

print(plot_temperature)

plot_temperature <- ggplot(data, aes(x = time, y = shortwave_radiation_sum)) +
  geom_line() +
  labs(
    title = "Temporal Time Series of shortwave_radiation_sum ",
    x = "Time",
    y = "shortwave_radiation_sum"
  ) +
  theme_minimal()

print(plot_temperature)

plot_temperature <- ggplot(data, aes(x = time, y = windspeed_10m_max)) +
  geom_line() +
  labs(
    title = "Temporal Time Series of windspeed_10m_max ",
    x = "Time",
    y = "windspeed_10m_max"
  ) +
  theme_minimal()

print(plot_temperature)

data$time <- as.Date(data$time)

# Create a time series plot for multiple variables
plot <- ggplot(data, aes(x = time)) +
  geom_line(aes(y = temperature_2m_mean, color = "Temperature 2m Mean"), size = 1) +
  geom_line(aes(y = shortwave_radiation_sum, color = "Shortwave Radiation Sum"), size = 1) +
  geom_line(aes(y = windspeed_10m_max, color = "Windspeed 10m Max"), size = 1) +
  labs(
    title = "Temporal Time Series of Weather Variables",
    x = "Time",
    y = "Value"
  ) +
  scale_color_manual(
    values = c("Temperature 2m Mean" = "blue", "Shortwave Radiation Sum" = "green",
               "Precipitation Sum" = "red", "Windspeed 10m Max" = "purple"),
    labels = c("Temperature 2m Mean", "Shortwave Radiation Sum", "Windspeed 10m Max")
  ) +
  theme_minimal()

print(plot)

"""# **2 Feature Engineering**"""

# Assuming your_data is loaded and temperature_2m_max is a time series variable
data$time <- as.POSIXct(data$time)

# Date and Time Features
data$day_of_week <- wday(data$time, label = TRUE)
data$month <- month(data$time, label = TRUE)
data$quarter <- quarter(data$time)
data$year <- year(data$time)

# Time of Day
data$time_of_day <- data$time - data$sunrise

# Daylight Hours
data$daylight_hours <- data$sunset - data$sunrise

# Difference Features
data$temp_diff <- data$temperature_2m_max - data$temperature_2m_min
data$apparent_temp_diff <- data$temperature_2m_max - data$apparent_temperature_max

# Ratio Features
data$temp_ratio <- data$temperature_2m_max / data$apparent_temperature_max

# Weather Interaction Features
data$weathercode_sunny <- ifelse(data$weathercode == "sunny", 1, 0)
data$weathercode_rainy <- ifelse(data$weathercode == "rainy", 1, 0)

# Geospatial Features (hypothetical example)
# Calculate distance from a reference point (latitude 0, longitude 0)
data$distance_from_reference <- sqrt((data$latitude - 0)^2 + (data$longitude - 0)^2)

install.packages("zoo")
# Aggregated Features (rolling mean)
data$rolling_mean_temp <- zoo::rollmean(data$temperature_2m_max, k = 7, fill = NA)

# Historical Aggregates (previous day's temperature)
data$prev_day_temp <- lag(data$temperature_2m_max)

# Seasonal Features
data$is_winter <- ifelse(data$month %in% c("12", "1", "2"), 1, 0)
data$is_summer <- ifelse(data$month %in% c("6", "7", "8"), 1, 0)

# Cumulative Features (cumulative precipitation)
data$cumulative_precipitation <- cumsum(data$precipitation_hours)

# Display the modified dataset
head(data)

# Identify Missing Values
missing_values <- sapply(data, function(x) sum(is.na(x)))
print(missing_values)

# Droping the missing values
featured_data <- na.omit(data)

head(featured_data)

"""# 3. Resource Efficiency Identification"""

# Set thresholds for efficiency identification
solar_threshold <- 800  # Adjust based on research and data
wind_threshold <- 5  # Adjust based on research and data

# Identify efficient solar data
efficient_solar_data <- featured_data %>%
  filter(shortwave_radiation_sum >= solar_threshold)

# Identify efficient wind data
efficient_wind_data <- featured_data %>%
  filter(windspeed_10m_max >= wind_threshold)

# Visualize Efficiency for Solar Power Generation
ggplot() +
  geom_histogram(data = featured_data, aes(x = shortwave_radiation_sum), bins = 30, fill = "blue", alpha = 0.5) +
  geom_histogram(data = efficient_solar_data, aes(x = shortwave_radiation_sum), bins = 30, fill = "green", alpha = 0.5) +
  labs(title = "Solar Power Generation Efficiency", x = "Solar Radiation") +
  theme_minimal()

# Visualize Efficiency for Wind Power Generation
ggplot() +
  geom_histogram(data = featured_data, aes(x = windspeed_10m_max), bins = 30, fill = "blue", alpha = 0.5) +
  geom_histogram(data = efficient_wind_data, aes(x = windspeed_10m_max), bins = 30, fill = "green", alpha = 0.5) +
  labs(title = "Wind Power Generation Efficiency", x = "Wind Speed") +
  theme_minimal()

"""# **5 Return on Investment (ROI) Modeling:**"""

install.packages("caret")
install.packages("randomForest")
library(caret)
library(randomForest)

# Data Preparation
construction_data <- featured_data %>%
  select(latitude, longitude, elevation) %>%
  drop_na()  # Drop rows with missing values

# Create synthetic construction cost (example formula, adjust as needed)
construction_data$synthetic_construction_cost <- 1000 + 5 * construction_data$latitude +
                                                10 * construction_data$longitude - 0.1 * construction_data$elevation

# Split data into training and testing sets
set.seed(123)
train_index <- createDataPartition(construction_data$synthetic_construction_cost, p = 0.8, list = FALSE)
train_data <- construction_data[train_index, ]
test_data <- construction_data[-train_index, ]

# Build a Regression Model (Random Forest)
model <- randomForest(synthetic_construction_cost ~ latitude + longitude + elevation, data = train_data)

# Make Predictions on the Test Data
predictions <- predict(model, newdata = test_data)
predictions

# Evaluate Model Performance (you can use appropriate metrics)
rmse <- sqrt(mean((test_data$synthetic_construction_cost - predictions)^2))
print(paste("Root Mean Squared Error:", rmse))

"""
# **4 Cost-Effective Construction**"""

head(featured_data)

# Data Preparation
roi_data <- featured_data %>%
  mutate(hours_between_sunrise_sunset = as.numeric(difftime(sunset, sunrise, units = "hours"))) %>%
  select(elevation,windspeed_10m_max, hours_between_sunrise_sunset) %>%
  drop_na()  # Drop rows with missing values

# Split data into training and testing sets
set.seed(123)
train_index <- createDataPartition(roi_data$windspeed_10m_max, p = 0.8, list = FALSE)
train_data <- roi_data[train_index, ]
test_data <- roi_data[-train_index, ]

# Build a Regression Model (Random Forest for demonstration)
model <- randomForest(windspeed_10m_max ~ ., data = train_data)

# Make Predictions on the Test Data
predictions <- predict(model, newdata = test_data)

# Evaluate Model Performance (you can use appropriate regression metrics)
rmse <- sqrt(mean((test_data$windspeed_10m_max - predictions)^2))
print(paste("Root Mean Squared Error:", rmse))

"""Plotting the locations on a Sri lankan Map"""

install.packages("sf")

library(sf)

shapefile <- st_read("District.shp")

# Display attribute data
head(shapefile)

# Plot the shapefile
plot(shapefile)

st_crs(shapefile)

head(featured_data)

temperature_data <- featured_data[, c("latitude", "longitude","temperature_2m_mean")]
head(temperature_data)

# Create an sf data frame with temperature data
temperature_sf <- st_as_sf(temperature_data, coords = c("longitude", "latitude"))

coordinates_sf <- st_as_sf(coordinates, coords = c("latitude", "longitude"))

st_crs(coordinates_sf) <- st_crs(shapefile)

# Creat a map that we want to add the buffer
plot_new <- ggplot() +
  geom_sf(data = shapefile, color = "red") +  # Plot road network
  geom_sf(data = coordinates_sf, color = "black") +  # Overlay accident counts as points
  labs(title = "Locations",
       x = "Longitude",
       y = "Latitude",
       size = "temperature_2m_mean")

print(plot_new)

"""Model Training"""

